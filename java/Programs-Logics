package Arrays;
import java.util.*;

public class intersectionarray {
    public static void main(String[] args) {
        int[] arr1 = {1, 2, 3, 4, 5};
        int[] arr2 = {3, 4, 5, 6, 7};
        int[] result = findintersectionarray(arr1, arr2);
        System.out.print(Arrays.toString(result));
    }

    public static int[] findintersectionarray(int[] arr1, int[] arr2) {
        HashSet<Integer> set = new HashSet<>();                      // creating a HashSet to store unique Values in var Set
        int[] temp = new int[Math.min(arr1.length, arr2.length)];                  // creating a temp variable array with a formula 
        int index = 0;    //index is for placing the values

        for (int num : arr1) {
            set.add(num);
        }

        for (int num : arr2) {
            if (set.contains(num)) {
                temp[index++] = num;
                set.remove(num);
            }
        }

        int[] result = new int[index];
        System.arraycopy(temp, 0, result, 0, index);       //Using  System.arraycopy  to transfer from One array(temp) to other array (result)
        return result;
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. How to FInd the Kth Largest and Kth Smallest element / FInd the Second Largest Number and Second Smallest Number/ find the Duplicates and find the Kth Numbers

i) By Using Arrays.sort fn

import java.util.Arrays;

public class KthElements {
    public static void main(String[] args) {
        int[] arr = {12, 3, 5, 7, 19, 4};
        int k = 2; // Example: 2nd smallest and 2nd largest  // replace with it 

        Arrays.sort(arr); // Sort the array       {3,4,5,7,12,19}

        int kthSmallest = arr[k - 1];
        int kthLargest = arr[arr.length - k];

        System.out.println(k + "th Smallest element is " + kthSmallest);
        System.out.println(k + "th Largest element is " + kthLargest);
    }
}

ii) Without Sorting, By Using For Loop 
-------------------------------------------------------------------------------------------------------
public static void findSecondMinAndMax(int[] arr) {
    int firstMin = Integer.MAX_VALUE, secondMin = Integer.MAX_VALUE;
    int firstMax = Integer.MIN_VALUE, secondMax = Integer.MIN_VALUE;

    for (int num : arr) {
        // For smallest
        if (num < firstMin) {
            secondMin = firstMin;
            firstMin = num;
        } else if (num < secondMin && num != firstMin) {
            secondMin = num;
        }

        // For largest
        if (num > firstMax) {
            secondMax = firstMax;
            firstMax = num;
        } else if (num > secondMax && num != firstMax) {
            secondMax = num;
        }
    }

    System.out.println("Second Smallest: " + (secondMin == Integer.MAX_VALUE ? "Not found" : secondMin));
    System.out.println("Second Largest: " + (secondMax == Integer.MIN_VALUE ? "Not found" : secondMax));
}
-------------------------------------------------------------------------------------------------------------------------------------------
By Using Sorting and reverse Sorting 
import java.util.*;

class Main {
    public static void main(String[] args) {
        int[] arr = {12, 3, 5, 7, 19, 4};
        int k = 2; // Example: 2nd smallest and 2nd largest
        Arrays.sort(arr); // Sort the array
        int kthLargest = arr[arr.length - k];
        System.out.println(k + "th Largest element is " + kthLargest);
        // for Finding the smallest, we are creating the ArrayList
         List<Integer> list = new ArrayList<>();
        for(int num:arr){
        list.add(num);
        }
        Collections.sort(list,Collections.reverseOrder());
        System.out.print(list.get(list.size()-k));
    }
}
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Rotate Array (Right shift)

import java.util.*;

class Main {
    public static void main(String[] args) {
        int[] arr1 = {1, 2, 3, 4, 5};
        int n=3;           // mentioning how many times it has to Shift(no.of rotation) 
        for(int j=0;j<n;j++)        //iteration starts to repeat the Below Code
        {
       int last = arr1[arr1.length-1]; //which gives the index Value of array 
       for(int i=arr1.length-1;i>0;i--)     //(int i=4;i>0;i--) 
       {
           arr1[i] = arr1[i-1];  //arr1[4] = arr1[3] ->  {,1,1,2,3,4}
       }
        arr1[0] = last;    arr1[0] = 5;  ->   {5,1,2,3,4}
        }
       System.out.print(Arrays.toString(arr1));
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------
4. ROtate array - left shift
import java.util.*;

class Main {
    public static void main(String[] args) {
        int[] arr1 = {1, 2, 3, 4, 5};
        int n=3;
        for(int j=0;j<n;j++)
{

       int first = arr1[0]; //which gives the first index Value
       for(int i=0;i<arr1.length-1;i++)
       {
           arr1[i] = arr1[i+1]; // arr1[0] = arr1[1]; -> {2,3,4,5,5}
       }
        arr1[arr1.length-1] = first;  -> {2,3,4,5,1}
        
}       System.out.print(Arrays.toString(arr1));
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------
5. Find the last and First Occurence of the Array 
class Main {
    public static void main(String[] args) {
        int[] a = {1, 2, 3, 2, 4, 2, 3, 4, 2};
        int target = 2;

        int first = -1, last = -1;  // Assigning the first and last values as -1(sentinel value)(not found)

        for (int i = 0; i < a.length; i++) {
            if (a[i] == target) {
                first = i;
                break;
            }
        }
        for (int j = a.length - 1; j >= 0; j--) {
            if (a[j] == target) {
                last = j;
                break;
            }
        }
        if (first != -1 && last != -1) {
            System.out.println("First Occurrence: " + first);
            System.out.println("Last Occurrence: " + last);
        } else {
            System.out.println("Element not found.");
        }
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------
6. Move All Zeros to Last 
import java.util.*;

class Main {
    public static void main(String[] args) {
        int[] a = {0, 0, 0, 1, 0, 2, 3};

        int[] temp = new int[a.length]; // create array with same length
        int index = 0;

        // Copy all non-zero elements to temp
        for (int i = 0; i < a.length; i++) {
            if (a[i] != 0) {
                temp[index++] = a[i];
            }
        }

        // Remaining elements (zeros) are already 0 by default in temp[]

        System.out.println(Arrays.toString(temp));
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------
7. sorting the Array without any Builtin Fn

public class EasySort {
    public static void main(String[] args) {
        int[] arr = {4, 2, 1, 5, 3};

        // Sorting logic
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                // Swap if current element is greater than the next one
                if (arr[i] > arr[j]) {
                    int temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            }
        }

        // Print sorted array
        System.out.println("Sorted Array:");
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------

8. Finding the Missing Number 

public class Main {
public static void main(String[] args) {
int[] array = {1, 2, 4, 5, 6}; // Missing number is 3
int missingNumber = findMissingNumber(array);
System.out.println("The missing number is: " + missingNumber);
}
public static int findMissingNumber(int[] array) {
int n = array.length + 1; // Since one number is missing, the length

int totalSum = n * (n + 1) / 2; // Sum of first n natural numbers
int arraySum = 0;
for (int num : array) {
arraySum =arraySum + num;
}
return totalSum - arraySum;
}
}
----------------------------------------------------------------------------------------------------------------------------------------------------------
9. count of odd and even numbers

public class Main {
    public static void main(String[] args) {
        int[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9};

        int oddCount = 0;
        int evenCount = 0;

        for (int num : array) {
            if (num % 2 == 0) {
                evenCount++; // Even number
            } else {
                oddCount++;  // Odd number
            }
        }

        System.out.println("Even numbers count: " + evenCount);
        System.out.println("Odd numbers count: " + oddCount);
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------
10.  print one occurence in array 
import java.util.*;

public class Main {
    public static void main(String[] args) {
        int[] array = {1, 1, 2, 2, 3, 4, 5, 5, 6, 6};
        List<Integer> result = findUniqueElements(array);

        System.out.println("Output: " + result);
    }

    public static List<Integer> findUniqueElements(int[] array) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();

        // Count frequency of each number
        for (int num : array) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        // Collect elements that appear only once
        List<Integer> uniqueElements = new ArrayList<>();
        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
            if (entry.getValue() == 1) {
                uniqueElements.add(entry.getKey());
            }
        }

        return uniqueElements;
    }
}

----------------------------------------------------------------------------------------------------------------------
11. Create a  List and add numbers and Find odd number
import java.util.*;
public class Main{
    public static void main(String[] args){
        List<Integer> list = Arrays.asList(45,25,36,98,87);
        
        //edge case 1 
        if(list==null){
            System.out.println("List is null");
        }
        
        //Edge case 2
        if(list.isEmpty())
        {
        System.out.println("List is empty");
        }
        
        //Adding a new List 
        
        List<Integer> oddnum = new ArrayList<>();
        //Edge case 3 
         for(int num : list)
         {
             if(num%2!=0)
             {
                oddnum.add(num); 
             }
         }
         //Edge case 4 
         if(oddnum.isEmpty())
         {
         System.out.println("List has no  odd number");
         }
         else
         {
        System.out.println("The odd numbers are "+oddnum);
         }
         
    }
}

------------------------------------------------------------------------------------------------------------

13. Sort thr negatives zeros and postives

import java.util.*;

class Main {
    public static void main(String[] args) {
        int[] a = {-12, 28, 98, -85, 14, 0, 0, -96, 45};
        int[] result = new int[a.length];
        int index = 0;

        // 1. Negatives
        for (int i = 0; i < a.length; i++) {
            if (a[i] < 0) {
                result[index++] = a[i];
            }
        }

        // 2. Zeros
        for (int i = 0; i < a.length; i++) {
            if (a[i] == 0) {
                result[index++] = a[i];
            }
        }

        // 3. Positives
        for (int i = 0; i < a.length; i++) {
            if (a[i] > 0) {
                result[index++] = a[i];
            }
        }

        System.out.println(Arrays.toString(result));
    }
}
----------------------------------------------------------------------------------------------
14. create a list of Students and their marks and 

import java.util.*;
class Main {
    public static void main(String[] args) {
        // Create a HashMap with <Name, Marks>
        Map<String, Integer> students = new HashMap<>();
        students.put("Ravi", 85);
        students.put("Anita", 25);
        students.put("Kumar", 15);
        students.put("Sita", 45);

        // Print students with marks < 30
        for (Map.Entry<String, Integer> entry : students.entrySet()) {
            if (entry.getValue() < 30) {
                System.out.println(entry.getKey() + " scored " + entry.getValue());
            }
        }
    }
}

